package test_module

fn ____itok__test_module__main_counted_for_0_body(i: bits[32], __token_wrapped: (token, bits[1], bits[32])) -> (token, bits[1], bits[32]) {
  tuple_index.7: token = tuple_index(__token_wrapped, index=0, id=7)
  tuple_index.8: bits[1] = tuple_index(__token_wrapped, index=1, id=8)
  tuple_index.9: bits[32] = tuple_index(__token_wrapped, index=2, id=9)
  ret tuple.10: (token, bits[1], bits[32]) = tuple(tuple_index.7, tuple_index.8, tuple_index.9, id=10)
}

fn __itok__test_module__main(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  literal.4: bits[32] = literal(value=0, id=4)
  tuple.11: (token, bits[1], bits[32]) = tuple(__token, __activated, literal.4, id=11)
  counted_for.12: (token, bits[1], bits[32]) = counted_for(tuple.11, trip_count=1, stride=1, body=____itok__test_module__main_counted_for_0_body, id=12)
  not.15: bits[1] = not(__activated, id=15)
  tuple_index.13: token = tuple_index(counted_for.12, index=0, id=13)
  assert.16: token = assert(__token, not.15, message="Assertion failure via fail! @ test_module.x:6:8-6:11", id=16)
  x__1: bits[32] = tuple_index(counted_for.12, index=2, id=14)
  after_all.18: token = after_all(tuple_index.13, assert.16, id=18)
  identity.17: bits[32] = identity(x__1, id=17)
  ret tuple.19: (token, bits[32]) = tuple(after_all.18, identity.17, id=19)
}
